{
  "language": "Solidity",
  "sources": {
    "contracts/PropertyOwnership.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nerror PropertyOwnership__NotOwner();\nerror PropertyOwnership__InvalidPropertyId();\nerror PropertyOwnership__InvalidPrice();\nerror PropertyOwnership__InvalidOwner();\nerror PropertyOwnership__NoPndingRequests();\n\ncontract PropertyOwnership {\n    address private contractOwner;\n    uint256 private nextPropertyId;\n    struct OwnershipTransferRequest {\n        address requester;\n        uint256 price;\n        uint256 timestamp;\n    }\n\n    struct PropertyDetails {\n        uint256 propertyId;\n        address owner;\n        uint256 price;\n    }\n\n    mapping(uint256 => address) private propertyOwners;\n    mapping(uint256 => uint256) private propertyPrices;\n    mapping(uint256 => OwnershipTransferRequest) private transferRequests;\n\n    event PropertyAdded(uint256 indexed propertyId, uint256 price);\n    event OwnershipTransferred(\n        uint256 indexed propertyId,\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n    event OwnershipTransferRequested(\n        uint256 indexed propertyId,\n        address indexed requester,\n        uint256 price\n    );\n\n    constructor() {\n        contractOwner = msg.sender;\n        nextPropertyId = 1;\n    }\n\n    modifier onlyContractOwner() {\n        if (msg.sender != contractOwner) {\n            revert PropertyOwnership__NotOwner();\n        }\n        _;\n    }\n\n    function addProperty(uint256 price) public onlyContractOwner {\n        propertyOwners[nextPropertyId] = contractOwner;\n        propertyPrices[nextPropertyId] = price;\n\n        emit PropertyAdded(nextPropertyId, price);\n\n        nextPropertyId++;\n    }\n\n    function getOwner(uint256 propertyId) public view returns (address) {\n        return propertyOwners[propertyId];\n    }\n\n    function getPrice(uint256 propertyId) public view returns (uint256) {\n        return propertyPrices[propertyId];\n    }\n\n    function getContractOwner() public view returns (address) {\n        return contractOwner;\n    }\n\n    function getNextPropertyId() public view returns (uint256) {\n        return nextPropertyId;\n    }\n\n    function getBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function getAllProperties() public view returns (PropertyDetails[] memory) {\n        PropertyDetails[] memory properties = new PropertyDetails[](\n            nextPropertyId - 1\n        );\n\n        for (uint256 i = 1; i < nextPropertyId; i++) {\n            properties[i - 1] = PropertyDetails(\n                i,\n                propertyOwners[i],\n                propertyPrices[i]\n            );\n        }\n\n        return properties;\n    }\n\n    function getPendingRequest(\n        uint256 propertyid\n    ) public view returns (OwnershipTransferRequest memory) {\n        return transferRequests[propertyid];\n    }\n\n    function requestOwnershipTransfer(uint256 propertyId) public payable {\n        if (propertyOwners[propertyId] == address(0)) {\n            revert PropertyOwnership__InvalidPropertyId();\n        }\n        if (propertyPrices[propertyId] != msg.value) {\n            revert PropertyOwnership__InvalidPrice();\n        }\n        if (propertyOwners[propertyId] == msg.sender) {\n            revert PropertyOwnership__InvalidOwner();\n        }\n        // require(msg.value == price, \"Please send the correct amount of Ether\");\n        transferRequests[propertyId] = OwnershipTransferRequest({\n            requester: msg.sender,\n            price: msg.value,\n            timestamp: block.timestamp\n        });\n\n        emit OwnershipTransferRequested(propertyId, msg.sender, msg.value);\n    }\n\n    function approveOwnershipTransfer(\n        uint256 propertyId,\n        address newOwner\n    ) public {\n        if (propertyOwners[propertyId] == address(0)) {\n            revert PropertyOwnership__InvalidPropertyId();\n        }\n\n        if (propertyOwners[propertyId] != msg.sender) {\n            revert PropertyOwnership__NotOwner();\n        }\n        if (propertyOwners[propertyId] == newOwner) {\n            revert PropertyOwnership__InvalidOwner();\n        }\n\n        // Perform the ownership transfer\n        address previousOwner = propertyOwners[propertyId]; // Store the previous owner's address\n        uint256 price = propertyPrices[propertyId]; // Store the price of the property\n\n        // Transfer the price to the previous owner\n        (bool success, ) = payable(previousOwner).call{value: price}(\"\");\n        require(success, \"Payment to previous owner failed\");\n\n        propertyOwners[propertyId] = newOwner; // Update the ownership after the payment is successful\n\n        delete transferRequests[propertyId];\n        emit OwnershipTransferred(propertyId, msg.sender, newOwner);\n    }\n\n    function cancelOwnershipTransfer(uint256 propertyId) public {\n        if (\n            msg.sender != contractOwner &&\n            msg.sender != transferRequests[propertyId].requester\n        ) {\n            revert PropertyOwnership__InvalidOwner();\n        }\n\n        if (transferRequests[propertyId].requester == address(0)) {\n            revert PropertyOwnership__NoPndingRequests();\n        }\n\n        uint256 price = transferRequests[propertyId].price;\n        payable(transferRequests[propertyId].requester).transfer(price);\n\n        delete transferRequests[propertyId];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}